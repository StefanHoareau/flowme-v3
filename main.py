import os
import json
import httpx
import logging
from fastapi import FastAPI, Request, HTTPException
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse, JSONResponse
from pydantic import BaseModel
from typing import Dict, Any, Optional, List
import uvicorn
from datetime import datetime

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="FlowMe v3", version="3.0.0")

# Configuration depuis les variables d'environnement
MISTRAL_API_KEY = os.getenv("MISTRAL_API_KEY")
NOCODB_URL = os.getenv("NOCODB_URL", "https://app.nocodb.com")
NOCODB_API_KEY = os.getenv("NOCODB_API_KEY")
NOCODB_STATES_TABLE_ID = os.getenv("NOCODB_STATES_TABLE_ID", "mpcze1f1cb4x64x")
NOCODB_REACTIONS_TABLE_ID = os.getenv("NOCODB_REACTIONS_TABLE_ID", "m8lwhj640ohzg7m")

# √âtats par d√©faut (fallback si NocoDB ne r√©pond pas)
DEFAULT_STATES = {
    "Joie": {"description": "Sentiment de bonheur et de satisfaction", "color": "#FFD700", "emoji": "üòä"},
    "Tristesse": {"description": "Sentiment de m√©lancolie ou de peine", "color": "#4682B4", "emoji": "üò¢"},
    "Col√®re": {"description": "Sentiment d'irritation ou de frustration", "color": "#DC143C", "emoji": "üò†"},
    "Peur": {"description": "Sentiment d'anxi√©t√© ou d'appr√©hension", "color": "#800080", "emoji": "üò®"},
    "Surprise": {"description": "Sentiment d'√©tonnement", "color": "#FF6347", "emoji": "üò≤"},
    "D√©go√ªt": {"description": "Sentiment de r√©pulsion", "color": "#228B22", "emoji": "üòí"},
    "Amour": {"description": "Sentiment d'affection profonde", "color": "#FF69B4", "emoji": "‚ù§Ô∏è"},
    "Espoir": {"description": "Sentiment d'optimisme pour l'avenir", "color": "#87CEEB", "emoji": "üåü"},
    "Nostalgie": {"description": "Sentiment de m√©lancolie li√©e au pass√©", "color": "#DDA0DD", "emoji": "üåÖ"},
    "Pr√©sence": {"description": "√âtat de pleine conscience et d'attention", "color": "#32CD32", "emoji": "üßò"}
}

class ChatMessage(BaseModel):
    message: str
    user_id: Optional[str] = "anonymous"

class FlowMeStatesDetection:
    def __init__(self, states_data: Dict[str, Any]):
        self.states = states_data
        logger.info(f"‚úÖ Module flowme_states_detection int√©gr√© avec succ√®s")
    
    def detect_emotion(self, text: str) -> str:
        """D√©tection simple d'√©motion bas√©e sur des mots-cl√©s"""
        text_lower = text.lower()
        
        # Mots-cl√©s pour chaque √©motion
        keywords = {
            "Joie": ["heureux", "content", "joyeux", "super", "g√©nial", "fantastique", "parfait"],
            "Tristesse": ["triste", "malheureux", "d√©prim√©", "m√©lancolique", "sombre"],
            "Col√®re": ["√©nerv√©", "furieux", "irrit√©", "en col√®re", "f√¢ch√©"],
            "Peur": ["peur", "anxieux", "stress√©", "inquiet", "nerveux"],
            "Amour": ["amour", "aimer", "affection", "tendresse", "passion"],
            "Espoir": ["espoir", "optimiste", "confiant", "positif", "encourag√©"],
            "Pr√©sence": ["pr√©sent", "ici", "maintenant", "conscience", "m√©ditation"]
        }
        
        for emotion, words in keywords.items():
            if any(word in text_lower for word in words):
                return emotion
        
        return "Pr√©sence"  # √âtat par d√©faut

# Instance globale
flowme_states = None

async def test_nocodb_endpoints():
    """Test de diff√©rents endpoints NocoDB pour diagnostic"""
    if not NOCODB_API_KEY:
        logger.error("üî¥ NOCODB_API_KEY manquante")
        return
    
    headers = {
        "accept": "application/json",
        "xc-token": NOCODB_API_KEY
    }
    
    test_urls = [
        f"{NOCODB_URL}/api/v2/tables/{NOCODB_STATES_TABLE_ID}/records",
        f"{NOCODB_URL}/api/v2/tables/{NOCODB_REACTIONS_TABLE_ID}/records",
        f"{NOCODB_URL}/api/v1/db/data/noco/{NOCODB_STATES_TABLE_ID}",
        f"{NOCODB_URL}/api/v2/meta/tables/{NOCODB_STATES_TABLE_ID}",
    ]
    
    async with httpx.AsyncClient(timeout=10.0) as client:
        for i, url in enumerate(test_urls):
            try:
                logger.info(f"üß™ Test {i+1}: {url}")
                response = await client.get(url, headers=headers)
                logger.info(f"üìä R√©ponse {i+1}: HTTP {response.status_code}")
                
                if response.status_code == 200:
                    try:
                        data = response.json()
                        logger.info(f"‚úÖ Donn√©es re√ßues: {len(str(data))} caract√®res")
                        if isinstance(data, dict) and "list" in data:
                            logger.info(f"üìã Nombre d'enregistrements: {len(data.get('list', []))}")
                        elif isinstance(data, list):
                            logger.info(f"üìã Nombre d'enregistrements: {len(data)}")
                    except:
                        logger.info(f"üìÑ R√©ponse texte: {response.text[:200]}...")
                else:
                    logger.warning(f"‚ùå Erreur {response.status_code}: {response.text[:200]}")
                    
            except Exception as e:
                logger.error(f"üí• Exception test {i+1}: {e}")

async def load_nocodb_states():
    """Charge les √©tats depuis NocoDB v2 avec diagnostic complet"""
    global flowme_states
    
    logger.info("üîç === DIAGNOSTIC NOCODB COMPLET ===")
    logger.info(f"üîß URL NocoDB: {NOCODB_URL}")
    logger.info(f"üîß API Key: {NOCODB_API_KEY[:10]}...{NOCODB_API_KEY[-10:] if NOCODB_API_KEY else 'MANQUANTE'}")
    logger.info(f"üîß States Table ID: {NOCODB_STATES_TABLE_ID}")
    logger.info(f"üîß Reactions Table ID: {NOCODB_REACTIONS_TABLE_ID}")
    
    # Test des endpoints
    await test_nocodb_endpoints()
    
    if not NOCODB_API_KEY or not NOCODB_STATES_TABLE_ID:
        logger.warning("‚ö†Ô∏è Configuration NocoDB manquante, utilisation √©tats par d√©faut")
        flowme_states = FlowMeStatesDetection(DEFAULT_STATES)
        return
    
    try:
        headers = {
            "accept": "application/json",
            "xc-token": NOCODB_API_KEY
        }
        
        # Essai principal avec l'API v2
        url = f"{NOCODB_URL}/api/v2/tables/{NOCODB_STATES_TABLE_ID}/records"
        logger.info(f"üéØ Tentative principale: {url}")
        
        async with httpx.AsyncClient(timeout=15.0) as client:
            response = await client.get(url, headers=headers)
            
            logger.info(f"üì° Status Code: {response.status_code}")
            logger.info(f"üì° Headers: {dict(response.headers)}")
            logger.info(f"üì° Response Text: {response.text[:500]}...")
            
            if response.status_code == 200:
                data = response.json()
                logger.info(f"üéâ Succ√®s! Type de donn√©es: {type(data)}")
                
                # Traitement des donn√©es NocoDB v2
                states_dict = {}
                records = data.get("list", []) if isinstance(data, dict) else data
                
                logger.info(f"üìã Nombre d'enregistrements trouv√©s: {len(records)}")
                
                for i, record in enumerate(records[:3]):  # Log des 3 premiers pour debug
                    logger.info(f"üìù Enregistrement {i+1}: {record}")
                
                for record in records:
                    if isinstance(record, dict):
                        # Essai de diff√©rents noms de colonnes
                        name = (record.get("√âtat") or 
                               record.get("Nom") or 
                               record.get("Name") or 
                               record.get("etat_nom") or
                               record.get("titre") or
                               record.get("Title"))
                        
                        if name:
                            states_dict[name] = {
                                "description": (record.get("Description") or 
                                              record.get("description") or ""),
                                "color": (record.get("Couleur") or 
                                         record.get("couleur") or 
                                         record.get("Color") or "#808080"),
                                "emoji": (record.get("Emoji") or 
                                         record.get("emoji") or "üòê")
                            }
                
                if states_dict:
                    flowme_states = FlowMeStatesDetection(states_dict)
                    logger.info(f"üéâ {len(states_dict)} √©tats FlowMe charg√©s depuis NocoDB v2")
                    logger.info(f"üìã √âtats charg√©s: {list(states_dict.keys())[:5]}")
                else:
                    logger.warning("‚ö†Ô∏è Aucun √©tat valide trouv√© dans les donn√©es NocoDB")
                    flowme_states = FlowMeStatesDetection(DEFAULT_STATES)
                    
            else:
                logger.error(f"‚ùå √âchec chargement NocoDB (HTTP {response.status_code})")
                logger.error(f"‚ùå R√©ponse compl√®te: {response.text}")
                flowme_states = FlowMeStatesDetection(DEFAULT_STATES)
                
    except Exception as e:
        logger.error(f"üí• Erreur connexion NocoDB: {e}")
        import traceback
        logger.error(f"üí• Traceback: {traceback.format_exc()}")
        flowme_states = FlowMeStatesDetection(DEFAULT_STATES)

async def save_to_nocodb(user_message: str, ai_response: str, detected_state: str, user_id: str = "anonymous"):
    """Sauvegarde l'interaction dans NocoDB v2"""
    if not NOCODB_API_KEY or not NOCODB_REACTIONS_TABLE_ID:
        return False
    
    try:
        headers = {
            "accept": "application/json",
            "Content-Type": "application/json",
            "xc-token": NOCODB_API_KEY
        }
        
        url = f"{NOCODB_URL}/api/v2/tables/{NOCODB_REACTIONS_TABLE_ID}/records"
        
        payload = {
            "User_Message": user_message[:500],
            "AI_Response": ai_response[:1000],
            "Detected_State": detected_state,
            "User_ID": user_id,
            "Timestamp": datetime.now().isoformat()
        }
        
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.post(url, headers=headers, json=payload)
            
            if response.status_code in [200, 201]:
                logger.info("‚úÖ Interaction sauvegard√©e dans NocoDB v2")
                return True
            else:
                logger.error(f"‚ùå Erreur sauvegarde NocoDB: HTTP {response.status_code}")
                return False
                
    except Exception as e:
        logger.error(f"‚ùå Erreur sauvegarde NocoDB: {e}")
        return False

async def generate_mistral_response(message: str, detected_state: str) -> str:
    """G√©n√®re une r√©ponse empathique avec Mistral AI"""
    if not MISTRAL_API_KEY:
        return f"Je comprends que vous ressentez de la {detected_state.lower()}. Comment puis-je vous accompagner ?"
    
    try:
        state_info = flowme_states.states.get(detected_state, {})
        state_description = state_info.get("description", detected_state)
        
        system_prompt = f"""Tu es FlowMe, un compagnon IA empathique sp√©cialis√© dans le bien-√™tre √©motionnel.
        
L'utilisateur semble ressentir: {detected_state} ({state_description})

R√©ponds de mani√®re:
- Empathique et bienveillante
- Adapt√©e √† l'√©tat √©motionnel d√©tect√©
- Encourageante et positive
- En fran√ßais, de fa√ßon naturelle et chaleureuse
- Maximum 150 mots

Ton but est d'offrir un soutien √©motionnel authentique."""

        headers = {
            "Authorization": f"Bearer {MISTRAL_API_KEY}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": "mistral-small-latest",
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": message}
            ],
            "temperature": 0.7,
            "max_tokens": 200
        }
        
        async with httpx.AsyncClient(timeout=15.0) as client:
            response = await client.post(
                "https://api.mistral.ai/v1/chat/completions",
                headers=headers,
                json=payload
            )
            
            if response.status_code == 200:
                try:
                    result = response.json()
                    return result["choices"][0]["message"]["content"].strip()
                except (KeyError, json.JSONDecodeError) as e:
                    logger.warning("R√©ponse Mistral non-JSON")
                    return f"Je sens que vous traversez un moment de {detected_state.lower()}. Je suis l√† pour vous √©couter et vous accompagner. Que ressentez-vous en ce moment ?"
            else:
                logger.error(f"Erreur Mistral API: {response.status_code}")
                return f"Je per√ßois votre √©tat de {detected_state.lower()}. Comment puis-je vous aider √† mieux vous sentir ?"
                
    except Exception as e:
        logger.error(f"Erreur g√©n√©ration r√©ponse: {e}")
        return f"Je comprends votre ressenti. Parlons de ce qui vous pr√©occupe en ce moment."

@app.on_event("startup")
async def startup_event():
    """Initialisation au d√©marrage"""
    await load_nocodb_states()
    logger.info("üöÄ D√©marrage de FlowMe v3")
    logger.info(f"‚úÖ Mistral API: {'‚úì Configur√©' if MISTRAL_API_KEY else '‚úó Manquant'}")
    logger.info(f"‚úÖ NocoDB: {'‚úì Configur√©' if NOCODB_API_KEY else '‚úó Manquant'}")
    logger.info(f"üîß States Table ID: {NOCODB_STATES_TABLE_ID}")
    logger.info(f"üîß Reactions Table ID: {NOCODB_REACTIONS_TABLE_ID}")
    logger.info(f"üìä √âtats disponibles: {len(flowme_states.states) if flowme_states else 0}")

@app.get("/", response_class=HTMLResponse)
async def home():
    """Page d'accueil FlowMe v3"""
    states_json = json.dumps(flowme_states.states if flowme_states else DEFAULT_STATES)
    
    html_content = f"""
    <!DOCTYPE html>
    <html lang="fr">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>FlowMe v3 - Votre Compagnon √âmotionnel IA</title>
        <style>
            * {{
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }}
            
            body {{
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                display: flex;
                justify-content: center;
                align-items: center;
                padding: 20px;
            }}
            
            .container {{
                background: rgba(255, 255, 255, 0.95);
                border-radius: 20px;
                padding: 40px;
                box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                max-width: 800px;
                width: 100%;
                backdrop-filter: blur(10px);
            }}
            
            .header {{
                text-align: center;
                margin-bottom: 40px;
            }}
            
            .logo {{
                font-size: 3em;
                margin-bottom: 10px;
            }}
            
            h1 {{
                color: #333;
                font-size: 2.5em;
                margin-bottom: 10px;
                background: linear-gradient(45deg, #667eea, #764ba2);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                background-clip: text;
            }}
            
            .subtitle {{
                color: #666;
                font-size: 1.2em;
                margin-bottom: 30px;
            }}
            
            .debug-info {{
                background: #f8f9fa;
                border: 1px solid #e9ecef;
                border-radius: 8px;
                padding: 15px;
                margin-bottom: 20px;
                font-family: monospace;
                font-size: 0.9em;
            }}
            
            .chat-container {{
                background: #f8f9fa;
                border-radius: 15px;
                padding: 30px;
                margin-bottom: 30px;
                max-height: 400px;
                overflow-y: auto;
            }}
            
            .message {{
                margin-bottom: 20px;
                padding: 15px;
                border-radius: 12px;
                animation: fadeIn 0.5s ease-in;
            }}
            
            .user-message {{
                background: linear-gradient(45deg, #667eea, #764ba2);
                color: white;
                margin-left: 20%;
                border-bottom-right-radius: 5px;
            }}
            
            .ai-message {{
                background: white;
                color: #333;
                margin-right: 20%;
                border: 1px solid #e0e0e0;
                border-bottom-left-radius: 5px;
            }}
            
            .state-indicator {{
                display: inline-block;
                padding: 5px 12px;
                border-radius: 20px;
                font-size: 0.9em;
                font-weight: bold;
                margin-top: 10px;
                color: white;
            }}
            
            .input-container {{
                display: flex;
                gap: 15px;
                margin-bottom: 20px;
            }}
            
            #userInput {{
                flex: 1;
                padding: 15px;
                border: 2px solid #e0e0e0;
                border-radius: 12px;
                font-size: 1.1em;
                transition: border-color 0.3s;
            }}
            
            #userInput:focus {{
                outline: none;
                border-color: #667eea;
            }}
            
            #sendButton {{
                padding: 15px 30px;
                background: linear-gradient(45deg, #667eea, #764ba2);
                color: white;
                border: none;
                border-radius: 12px;
                font-size: 1.1em;
                cursor: pointer;
                transition: transform 0.2s;
            }}
            
            #sendButton:hover {{
                transform: translateY(-2px);
            }}
            
            #sendButton:disabled {{
                opacity: 0.6;
                cursor: not-allowed;
                transform: none;
            }}
            
            .states-grid {{
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 15px;
                margin-top: 20px;
            }}
            
            .state-card {{
                background: white;
                padding: 20px;
                border-radius: 12px;
                border: 2px solid #f0f0f0;
                text-align: center;
                transition: transform 0.2s, box-shadow 0.2s;
                cursor: pointer;
            }}
            
            .state-card:hover {{
                transform: translateY(-5px);
                box-shadow: 0 10px 20px rgba(0,0,0,0.1);
            }}
            
            .state-emoji {{
                font-size: 2em;
                margin-bottom: 10px;
            }}
            
            .state-name {{
                font-weight: bold;
                color: #333;
                margin-bottom: 5px;
            }}
            
            .state-description {{
                font-size: 0.9em;
                color: #666;
            }}
            
            @keyframes fadeIn {{
                from {{ opacity: 0; transform: translateY(20px); }}
                to {{ opacity: 1; transform: translateY(0); }}
            }}
            
            .typing {{
                display: none;
                padding: 15px;
                color: #666;
                font-style: italic;
            }}
            
            .typing.show {{
                display: block;
            }}
            
            .stats {{
                text-align: center;
                margin-top: 20px;
                padding: 20px;
                background: #f8f9fa;
                border-radius: 12px;
            }}
            
            .version {{
                position: fixed;
                bottom: 10px;
                right: 10px;
                background: rgba(0,0,0,0.7);
                color: white;
                padding: 5px 10px;
                border-radius: 5px;
                font-size: 0.8em;
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <div class="logo">üåäüíô</div>
                <h1>FlowMe v3 - Debug</h1>
                <p class="subtitle">Diagnostic complet de la connexion NocoDB</p>
            </div>
            
            <div class="debug-info">
                <strong>üîç Informations de Debug:</strong><br>
                API Key: {NOCODB_API_KEY[:10] if NOCODB_API_KEY else 'MANQUANTE'}...{NOCODB_API_KEY[-10:] if NOCODB_API_KEY else ''}<br>
                States Table ID: {NOCODB_STATES_TABLE_ID}<br>
                √âtats charg√©s: {len(flowme_states.states) if flowme_states else 0}<br>
                URL Test: {NOCODB_URL}/api/v2/tables/{NOCODB_STATES_TABLE_ID}/records
            </div>
            
            <div class="chat-container" id="chatContainer">
                <div class="ai-message">
                    <strong>FlowMe:</strong> Version DEBUG active ! Consultez les logs pour voir les d√©tails de connexion NocoDB. 
                    Les √©tats disponibles: {len(flowme_states.states) if flowme_states else len(DEFAULT_STATES)}
                </div>
            </div>
            
            <div class="typing" id="typing">FlowMe r√©fl√©chit...</div>
            
            <div class="input-container">
                <input type="text" id="userInput" placeholder="Testez une √©motion..." maxlength="500">
                <button id="sendButton" onclick="sendMessage()">Test</button>
            </div>
            
            <div class="stats">
                <p><strong>üìä √âtats √©motionnels:</strong> {len(flowme_states.states) if flowme_states else len(DEFAULT_STATES)} (Mode: {'NocoDB' if len(flowme_states.states if flowme_states else []) > 10 else 'D√©faut'})</p>
            </div>
            
            <div class="states-grid" id="statesGrid">
                <!-- Les √©tats seront g√©n√©r√©s dynamiquement -->
            </div>
        </div>
        
        <div class="version">FlowMe v3.0 - DEBUG</div>
        
        <script>
            const states = {states_json};
            let isProcessing = false;
            
            // G√©n√©ration des cartes d'√©tats
            function generateStatesGrid() {{
                const grid = document.getElementById('statesGrid');
                grid.innerHTML = '';
                
                Object.entries(states).forEach(([name, info]) => {{
                    const card = document.createElement('div');
                    card.className = 'state-card';
                    card.style.borderColor = info.color;
                    card.innerHTML = `
                        <div class="state-emoji">${{info.emoji || 'üòê'}}</div>
                        <div class="state-name">${{name}}</div>
                        <div class="state-description">${{info.description || ''}}</div>
                    `;
                    card.onclick = () => {{
                        document.getElementById('userInput').value = `Je me sens ${{name.toLowerCase()}}`;
                        document.getElementById('userInput').focus();
                    }};
                    grid.appendChild(card);
                }});
            }}
            
            // Envoi de message
            async function sendMessage() {{
                if (isProcessing) return;
                
                const input = document.getElementById('userInput');
                const message = input.value.trim();
                
                if (!message) return;
                
                isProcessing = true;
                document.getElementById('sendButton').disabled = true;
                document.getElementById('typing').classList.add('show');
                
                // Affichage du message utilisateur
                addMessage(message, 'user');
                input.value = '';
                
                try {{
                    const response = await fetch('/chat', {{
                        method: 'POST',
                        headers: {{
                            'Content-Type': 'application/json'
                        }},
                        body: JSON.stringify({{ message: message }})
                    }});
                    
                    const data = await response.json();
                    
                    if (data.response) {{
                        addMessage(data.response, 'ai', data.detected_state);
                    }} else {{
                        addMessage('Erreur de traitement. Consultez les logs serveur.', 'ai');
                    }}
                }} catch (error) {{
                    console.error('Erreur:', error);
                    addMessage('Erreur de connexion.', 'ai');
                }} finally {{
                    isProcessing = false;
                    document.getElementById('sendButton').disabled = false;
                    document.getElementById('typing').classList.remove('show');
                }}
            }}
            
            // Ajout de message dans le chat
            function addMessage(text, sender, detectedState = null) {{
                const container = document.getElementById('chatContainer');
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${{sender}}-message`;
                
                let content = `<strong>${{sender === 'user' ? 'Vous' : 'FlowMe'}}:</strong> ${{text}}`;
                
                if (detectedState && states[detectedState]) {{
                    const stateInfo = states[detectedState];
                    content += `<div class="state-indicator" style="background-color: ${{stateInfo.color}}">
                        ${{stateInfo.emoji || 'üòê'}} √âtat d√©tect√©: ${{detectedState}}
                    </div>`;
                }}
                
                messageDiv.innerHTML = content;
                container.appendChild(messageDiv);
                container.scrollTop = container.scrollHeight;
            }}
            
            // √âv√©nement touche Entr√©e
            document.getElementById('userInput').addEventListener('keypress', function(e) {{
                if (e.key === 'Enter' && !e.shiftKey) {{
                    e.preventDefault();
                    sendMessage();
                }}
            }});
            
            // Initialisation
            document.addEventListener('DOMContentLoaded', function() {{
                generateStatesGrid();
                document.getElementById('userInput').focus();
            }});
        </script>
    </body>
    </html>
    """
    return HTMLResponse(content=html_content)

@app.post("/chat")
async def chat_endpoint(chat_message: ChatMessage):
    """Endpoint principal de chat"""
    try:
        if not flowme_states:
            raise HTTPException(status_code=500, detail="Service FlowMe non initialis√©")
        
        # D√©tection de l'√©tat √©motionnel
        detected_state = flowme_states.detect_emotion(chat_message.message)
        logger.info(f"üí¨ √âtat d√©tect√©: {detected_state}")
        
        # G√©n√©ration de la r√©ponse
        ai_response = await generate_mistral_response(chat_message.message, detected_state)
        
        # Sauvegarde asynchrone
        await save_to_nocodb(
            chat_message.message, 
            ai_response, 
            detected_state, 
            chat_message.user_id
        )
        
        return JSONResponse({
            "response": ai_response,
            "detected_state": detected_state,
            "state_info": flowme_states.states.get(detected_state, {}),
            "timestamp": datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"Erreur chat endpoint: {e}")
        return JSONResponse({
            "response": "Je rencontre une difficult√© technique. Consultez les logs pour plus de d√©tails.",
            "detected_state": "Pr√©sence",
            "error": str(e)
        }, status_code=500)

@app.get("/health")
async def health_check():
    """V√©rification de sant√© du service"""
    return JSONResponse({
        "status": "healthy",
        "version": "3.0.0-debug",
        "states_loaded": len(flowme_states.states) if flowme_states else 0,
        "mistral_configured": bool(MISTRAL_API_KEY),
        "nocodb_configured": bool(NOCODB_API_KEY),
        "debug_info": {
            "nocodb_url": NOCODB_URL,
            "states_table_id": NOCODB_STATES_TABLE_ID,
            "reactions_table_id": NOCODB_REACTIONS_TABLE_ID,
            "api_key_present": bool(NOCODB_API_KEY),
            "api_key_preview": f"{NOCODB_API_KEY[:10]}...{NOCODB_API_KEY[-5:]}" if NOCODB_API_KEY else "MISSING"
        },
        "timestamp": datetime.now().isoformat()
    })

@app.get("/debug/nocodb")
async def debug_nocodb():
    """Endpoint de debug sp√©cifique pour NocoDB"""
    await test_nocodb_endpoints()
    return JSONResponse({
        "message": "Tests NocoDB termin√©s. Consultez les logs pour les r√©sultats d√©taill√©s.",
        "timestamp": datetime.now().isoformat()
    })

if __name__ == "__main__":
    port = int(os.getenv("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)
