import os
import json
import httpx
import logging
from fastapi import FastAPI, Request, HTTPException
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse, JSONResponse
from pydantic import BaseModel
from typing import Dict, Any, Optional, List
import uvicorn
from datetime import datetime

# Configuration s√©curis√©e du logging
logging.basicConfig(
    level=logging.INFO if os.getenv("DEBUG", "false").lower() == "true" else logging.WARNING,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="FlowMe v3", 
    version="3.0.0",
    docs_url="/docs" if os.getenv("ENVIRONMENT") != "production" else None,
    redoc_url="/redoc" if os.getenv("ENVIRONMENT") != "production" else None
)

# Configuration s√©curis√©e depuis les variables d'environnement
def get_secure_env(key: str, default: str = None, required: bool = False) -> str:
    """R√©cup√©ration s√©curis√©e des variables d'environnement"""
    value = os.getenv(key, default)
    if required and not value:
        logger.error(f"Variable d'environnement requise manquante: {key}")
        raise ValueError(f"Variable d'environnement {key} manquante")
    return value

# Variables d'environnement s√©curis√©es
MISTRAL_API_KEY = get_secure_env("MISTRAL_API_KEY", required=True)
NOCODB_URL = get_secure_env("NOCODB_URL", "https://app.nocodb.com")
NOCODB_API_KEY = get_secure_env("NOCODB_API_KEY")
NOCODB_STATES_TABLE_ID = get_secure_env("NOCODB_STATES_TABLE_ID", "mpcze1flcb4x64x")
NOCODB_REACTIONS_TABLE_ID = get_secure_env("NOCODB_REACTIONS_TABLE_ID", "m8lwhj640ohzg7m")
GITHUB_TOKEN = get_secure_env("GITHUB_TOKEN")
ENVIRONMENT = get_secure_env("ENVIRONMENT", "development")

# √âtats par d√©faut complets - Syst√®me de secours local
LOCAL_FALLBACK_STATES = {
    "Joie": {
        "description": "Sentiment de bonheur et de satisfaction profonde",
        "color": "#FFD700",
        "emoji": "üòä",
        "keywords": ["heureux", "content", "joyeux", "super", "g√©nial", "fantastique", "parfait", "ravi"]
    },
    "Tristesse": {
        "description": "Sentiment de m√©lancolie ou de peine",
        "color": "#4682B4", 
        "emoji": "üò¢",
        "keywords": ["triste", "malheureux", "d√©prim√©", "m√©lancolique", "sombre", "peine"]
    },
    "Col√®re": {
        "description": "Sentiment d'irritation ou de frustration intense",
        "color": "#DC143C",
        "emoji": "üò†",
        "keywords": ["√©nerv√©", "furieux", "irrit√©", "en col√®re", "f√¢ch√©", "rage"]
    },
    "Peur": {
        "description": "Sentiment d'anxi√©t√© ou d'appr√©hension",
        "color": "#800080",
        "emoji": "üò®",
        "keywords": ["peur", "anxieux", "stress√©", "inquiet", "nerveux", "angoisse"]
    },
    "Surprise": {
        "description": "Sentiment d'√©tonnement soudain",
        "color": "#FF6347",
        "emoji": "üò≤",
        "keywords": ["surpris", "√©tonn√©", "choqu√©", "stup√©fait", "√©bahi"]
    },
    "D√©go√ªt": {
        "description": "Sentiment de r√©pulsion ou d'aversion",
        "color": "#228B22",
        "emoji": "üòí",
        "keywords": ["d√©go√ªt√©", "√©c≈ìur√©", "r√©pugnant", "horrible"]
    },
    "Amour": {
        "description": "Sentiment d'affection profonde et de tendresse",
        "color": "#FF69B4",
        "emoji": "‚ù§Ô∏è",
        "keywords": ["amour", "aimer", "affection", "tendresse", "passion", "adorer"]
    },
    "Espoir": {
        "description": "Sentiment d'optimisme et de confiance en l'avenir",
        "color": "#87CEEB",
        "emoji": "üåü",
        "keywords": ["espoir", "optimiste", "confiant", "positif", "encourag√©", "motiv√©"]
    },
    "Nostalgie": {
        "description": "Sentiment de m√©lancolie li√©e aux souvenirs du pass√©",
        "color": "#DDA0DD",
        "emoji": "üåÖ",
        "keywords": ["nostalgie", "souvenir", "pass√©", "m√©lancolie", "regret"]
    },
    "Pr√©sence": {
        "description": "√âtat de pleine conscience et d'attention au moment pr√©sent",
        "color": "#32CD32",
        "emoji": "üßò",
        "keywords": ["pr√©sent", "ici", "maintenant", "conscience", "m√©ditation", "calme"]
    },
    "Curiosit√©": {
        "description": "D√©sir de d√©couvrir et d'apprendre",
        "color": "#FF8C00",
        "emoji": "ü§î",
        "keywords": ["curieux", "int√©ress√©", "questionne", "d√©couvrir", "apprendre"]
    },
    "√âveil": {
        "description": "√âtat de conscience √©largie et de lucidit√©",
        "color": "#9370DB",
        "emoji": "‚ú®",
        "keywords": ["√©veil", "conscient", "lucide", "r√©alisation", "r√©v√©lation"]
    },
    "Analyse": {
        "description": "√âtat de r√©flexion profonde et d'examen d√©taill√©",
        "color": "#4169E1",
        "emoji": "üîç",
        "keywords": ["analyse", "r√©flexion", "examen", "√©tude", "comprendre"]
    },
    "√âtonnement": {
        "description": "Sentiment de surprise m√™l√©e d'admiration",
        "color": "#FF6B6B",
        "emoji": "üòÆ",
        "keywords": ["√©tonn√©", "admiratif", "impressionn√©", "√©bloui"]
    },
    "S√©r√©nit√©": {
        "description": "√âtat de calme profond et de paix int√©rieure",
        "color": "#20B2AA",
        "emoji": "üïäÔ∏è",
        "keywords": ["serein", "paisible", "tranquille", "apais√©", "zen"]
    }
}

class ChatMessage(BaseModel):
    message: str
    user_id: Optional[str] = "anonymous"

class FlowMeStatesDetection:
    def __init__(self, states_data: Dict[str, Any], source: str = "local"):
        self.states = states_data
        self.source = source
        logger.info(f"‚úÖ FlowMe States Detection initialis√© - Source: {source}")
        logger.info(f"üìä {len(states_data)} √©tats charg√©s")
    
    def detect_emotion(self, text: str) -> str:
        """D√©tection d'√©motion bas√©e sur les mots-cl√©s avec fallback intelligent"""
        if not text:
            return "Pr√©sence"
            
        text_lower = text.lower().strip()
        
        # Score par √©motion
        emotion_scores = {}
        
        for emotion_name, emotion_data in self.states.items():
            score = 0
            keywords = emotion_data.get("keywords", [])
            
            # Calcul du score bas√© sur les mots-cl√©s
            for keyword in keywords:
                if keyword.lower() in text_lower:
                    # Score pond√©r√© selon la longueur du mot-cl√©
                    score += len(keyword) * text_lower.count(keyword.lower())
            
            if score > 0:
                emotion_scores[emotion_name] = score
        
        # Retourne l'√©motion avec le score le plus √©lev√©
        if emotion_scores:
            best_emotion = max(emotion_scores.items(), key=lambda x: x[1])
            logger.info(f"üéØ √âmotion d√©tect√©e: {best_emotion[0]} (score: {best_emotion[1]})")
            return best_emotion[0]
        
        # Fallback par d√©faut
        return "Pr√©sence"

# Instance globale
flowme_states = None

async def load_nocodb_states_with_fallback():
    """Charge les √©tats depuis NocoDB avec syst√®me de secours local robuste"""
    global flowme_states
    
    logger.info("üîç === CHARGEMENT √âTATS FLOWME ===")
    
    # Tentative de chargement depuis NocoDB
    if NOCODB_API_KEY and NOCODB_STATES_TABLE_ID:
        try:
            logger.info("üåê Tentative de connexion √† NocoDB...")
            
            headers = {
                "accept": "application/json; charset=utf-8",
                "xc-token": NOCODB_API_KEY
            }
            
            url = f"{NOCODB_URL}/api/v2/tables/{NOCODB_STATES_TABLE_ID}/records"
            
            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.get(url, headers=headers)
                
                if response.status_code == 200:
                    data = response.json()
                    records = data.get("list", []) if isinstance(data, dict) else data
                    
                    if records and len(records) > 0:
                        logger.info(f"üì° NocoDB connect√© - {len(records)} enregistrements trouv√©s")
                        
                        # Conversion des donn√©es NocoDB
                        nocodb_states = {}
                        for record in records:
                            if isinstance(record, dict):
                                name = record.get("Nom_√âtat")
                                if name:
                                    nocodb_states[name] = {
                                        "description": (record.get("Tension_Dominante") or 
                                                      record.get("Conseil_Flowme") or 
                                                      record.get("Famille_Symbolique") or ""),
                                        "color": record.get("Couleur", "#808080"),
                                        "emoji": record.get("Emoji", "üòê"),
                                        "keywords": [name.lower()]  # Mot-cl√© basique
                                    }
                        
                        if nocodb_states:
                            flowme_states = FlowMeStatesDetection(nocodb_states, "NocoDB")
                            logger.info(f"‚úÖ {len(nocodb_states)} √©tats charg√©s depuis NocoDB")
                            return
                
                logger.warning(f"‚ö†Ô∏è NocoDB non disponible (HTTP {response.status_code})")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur connexion NocoDB: {e}")
    
    # Fallback vers les √©tats locaux
    logger.info("üè† Activation du syst√®me de secours local")
    flowme_states = FlowMeStatesDetection(LOCAL_FALLBACK_STATES, "Local Fallback")
    logger.info(f"‚úÖ {len(LOCAL_FALLBACK_STATES)} √©tats locaux charg√©s")

async def save_to_nocodb_secure(user_message: str, ai_response: str, detected_state: str, user_id: str = "anonymous"):
    """Sauvegarde s√©curis√©e dans NocoDB avec gestion d'erreurs robuste"""
    if not NOCODB_API_KEY or not NOCODB_REACTIONS_TABLE_ID:
        logger.warning("‚ö†Ô∏è Sauvegarde NocoDB d√©sactiv√©e - Configuration manquante")
        return False
    
    try:
        headers = {
            "accept": "application/json",
            "Content-Type": "application/json; charset=utf-8",
            "xc-token": NOCODB_API_KEY
        }
        
        url = f"{NOCODB_URL}/api/v2/tables/{NOCODB_REACTIONS_TABLE_ID}/records"
        
        # Donn√©es s√©curis√©es et limit√©es
        payload = {
            "etat_nom": detected_state[:100],
            "tension_dominante": ai_response[:1000],
            "famille_symbolique": user_message[:500],
            "posture_adaptative": f"User: {user_id} | Source: {flowme_states.source if flowme_states else 'Unknown'}",
            "session_id": user_id[:50],
            "timestamp": datetime.now().isoformat()
        }
        
        async with httpx.AsyncClient(timeout=8.0) as client:
            response = await client.post(url, headers=headers, json=payload)
            
            if response.status_code in [200, 201]:
                logger.info(f"‚úÖ Interaction sauvegard√©e (√âtat: {detected_state})")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è Erreur sauvegarde NocoDB: HTTP {response.status_code}")
                return False
                
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Sauvegarde NocoDB √©chou√©e: {e}")
        return False

async def generate_mistral_response_secure(message: str, detected_state: str) -> str:
    """G√©n√©ration s√©curis√©e de r√©ponse avec Mistral AI"""
    try:
        if not MISTRAL_API_KEY:
            return f"Je comprends que vous ressentez de la {detected_state.lower()}. Comment puis-je vous accompagner dans ce moment ?"
        
        state_info = flowme_states.states.get(detected_state, {})
        state_description = state_info.get("description", detected_state)
        
        # Prompt s√©curis√© et contextualis√©
        system_prompt = f"""Tu es FlowMe, un compagnon IA empathique sp√©cialis√© dans le bien-√™tre √©motionnel.

L'utilisateur semble ressentir: {detected_state} ({state_description})

R√©ponds de mani√®re:
- Empathique et bienveillante
- Adapt√©e √† l'√©tat √©motionnel d√©tect√©  
- Encourageante et constructive
- En fran√ßais naturel et chaleureux
- Concise (maximum 150 mots)
- Respectueuse et professionnelle

Si le message contient des propos pr√©occupants, r√©ponds avec bienveillance tout en encourageant √† chercher de l'aide professionnelle si n√©cessaire."""

        headers = {
            "Authorization": f"Bearer {MISTRAL_API_KEY}",
            "Content-Type": "application/json; charset=utf-8"
        }
        
        payload = {
            "model": "mistral-small-latest",
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": message[:500]}  # Limitation s√©curis√©e
            ],
            "temperature": 0.7,
            "max_tokens": 200,
            "top_p": 0.9
        }
        
        async with httpx.AsyncClient(timeout=15.0) as client:
            response = await client.post(
                "https://api.mistral.ai/v1/chat/completions",
                headers=headers,
                json=payload
            )
            
            if response.status_code == 200:
                try:
                    result = response.json()
                    ai_response = result["choices"][0]["message"]["content"].strip()
                    logger.info(f"‚úÖ R√©ponse Mistral g√©n√©r√©e ({len(ai_response)} chars)")
                    return ai_response
                except (KeyError, json.JSONDecodeError):
                    logger.warning("‚ö†Ô∏è R√©ponse Mistral mal format√©e")
            else:
                logger.warning(f"‚ö†Ô∏è Erreur Mistral API: {response.status_code}")
        
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Erreur g√©n√©ration Mistral: {e}")
    
    # Fallback empathique s√©curis√©
    fallback_responses = {
        "Joie": "C'est merveilleux de ressentir cette joie ! Profitez pleinement de ce moment positif.",
        "Tristesse": "Je comprends cette tristesse. Prenez le temps dont vous avez besoin, je suis l√† pour vous √©couter.",
        "Col√®re": "Cette col√®re semble intense. Respirez profond√©ment et parlons de ce qui vous pr√©occupe.",
        "Peur": "Cette inqui√©tude est compr√©hensible. Explorons ensemble ce qui pourrait vous apaiser.",
        "Pr√©sence": "Je sens votre pr√©sence attentive. Comment puis-je vous accompagner aujourd'hui ?"
    }
    
    return fallback_responses.get(detected_state, 
        f"Je per√ßois votre √©tat de {detected_state.lower()}. Parlons de ce que vous ressentez en ce moment.")

@app.on_event("startup")
async def startup_event():
    """Initialisation s√©curis√©e au d√©marrage"""
    try:
        logger.info(f"üöÄ D√©marrage FlowMe v3 - Environnement: {ENVIRONMENT}")
        
        await load_nocodb_states_with_fallback()
        
        # V√©rification des services
        services_status = {
            "Mistral": "‚úì Configur√©" if MISTRAL_API_KEY else "‚úó Manquant",
            "NocoDB": "‚úì Configur√©" if NOCODB_API_KEY else "‚úó Mode local uniquement",
            "GitHub": "‚úì Token configur√©" if GITHUB_TOKEN else "‚úó Token manquant"
        }
        
        for service, status in services_status.items():
            logger.info(f"üîß {service}: {status}")
        
        logger.info(f"üìä √âtats disponibles: {len(flowme_states.states)} (Source: {flowme_states.source})")
        logger.info("‚úÖ FlowMe v3 initialis√© avec succ√®s")
        
    except Exception as e:
        logger.error(f"üí• Erreur critique au d√©marrage: {e}")
        raise

@app.get("/", response_class=HTMLResponse)
async def home():
    """Interface FlowMe v3 s√©curis√©e"""
    states_json = json.dumps({
        name: {
            "description": info["description"],
            "color": info["color"], 
            "emoji": info["emoji"]
        }
        for name, info in flowme_states.states.items()
    })
    
    states_count = len(flowme_states.states)
    source_info = flowme_states.source
    
    html_content = f"""
    <!DOCTYPE html>
    <html lang="fr">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta name="description" content="FlowMe v3 - Votre compagnon IA pour un bien-√™tre √©motionnel optimal">
        <title>FlowMe v3 - Compagnon √âmotionnel IA</title>
        <style>
            * {{
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }}
            
            body {{
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                display: flex;
                justify-content: center;
                align-items: center;
                padding: 20px;
            }}
            
            .container {{
                background: rgba(255, 255, 255, 0.95);
                border-radius: 20px;
                padding: 40px;
                box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                max-width: 800px;
                width: 100%;
                backdrop-filter: blur(10px);
            }}
            
            .header {{
                text-align: center;
                margin-bottom: 40px;
            }}
            
            .logo {{
                font-size: 3em;
                margin-bottom: 10px;
            }}
            
            h1 {{
                color: #333;
                font-size: 2.5em;
                margin-bottom: 10px;
                background: linear-gradient(45deg, #667eea, #764ba2);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                background-clip: text;
            }}
            
            .subtitle {{
                color: #666;
                font-size: 1.2em;
                margin-bottom: 30px;
            }}
            
            .status-info {{
                background: #f8f9fa;
                border-left: 4px solid #667eea;
                padding: 15px;
                margin-bottom: 20px;
                border-radius: 0 8px 8px 0;
                font-size: 0.9em;
            }}
            
            .chat-container {{
                background: #f8f9fa;
                border-radius: 15px;
                padding: 30px;
                margin-bottom: 30px;
                max-height: 400px;
                overflow-y: auto;
            }}
            
            .message {{
                margin-bottom: 20px;
                padding: 15px;
                border-radius: 12px;
                animation: fadeIn 0.5s ease-in;
            }}
            
            .user-message {{
                background: linear-gradient(45deg, #667eea, #764ba2);
                color: white;
                margin-left: 20%;
                border-bottom-right-radius: 5px;
            }}
            
            .ai-message {{
                background: white;
                color: #333;
                margin-right: 20%;
                border: 1px solid #e0e0e0;
                border-bottom-left-radius: 5px;
            }}
            
            .state-indicator {{
                display: inline-block;
                padding: 5px 12px;
                border-radius: 20px;
                font-size: 0.9em;
                font-weight: bold;
                margin-top: 10px;
                color: white;
            }}
            
            .input-container {{
                display: flex;
                gap: 15px;
                margin-bottom: 20px;
            }}
            
            #userInput {{
                flex: 1;
                padding: 15px;
                border: 2px solid #e0e0e0;
                border-radius: 12px;
                font-size: 1.1em;
                transition: border-color 0.3s;
            }}
            
            #userInput:focus {{
                outline: none;
                border-color: #667eea;
            }}
            
            #sendButton {{
                padding: 15px 30px;
                background: linear-gradient(45deg, #667eea, #764ba2);
                color: white;
                border: none;
                border-radius: 12px;
                font-size: 1.1em;
                cursor: pointer;
                transition: transform 0.2s;
            }}
            
            #sendButton:hover {{
                transform: translateY(-2px);
            }}
            
            #sendButton:disabled {{
                opacity: 0.6;
                cursor: not-allowed;
                transform: none;
            }}
            
            .states-grid {{
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 15px;
                margin-top: 20px;
            }}
            
            .state-card {{
                background: white;
                padding: 20px;
                border-radius: 12px;
                border: 2px solid #f0f0f0;
                text-align: center;
                transition: transform 0.2s, box-shadow 0.2s;
                cursor: pointer;
            }}
            
            .state-card:hover {{
                transform: translateY(-5px);
                box-shadow: 0 10px 20px rgba(0,0,0,0.1);
            }}
            
            .state-emoji {{
                font-size: 2em;
                margin-bottom: 10px;
            }}
            
            .state-name {{
                font-weight: bold;
                color: #333;
                margin-bottom: 5px;
            }}
            
            .state-description {{
                font-size: 0.9em;
                color: #666;
            }}
            
            @keyframes fadeIn {{
                from {{ opacity: 0; transform: translateY(20px); }}
                to {{ opacity: 1; transform: translateY(0); }}
            }}
            
            .typing {{
                display: none;
                padding: 15px;
                color: #666;
                font-style: italic;
            }}
            
            .typing.show {{
                display: block;
            }}
            
            .stats {{
                text-align: center;
                margin-top: 20px;
                padding: 20px;
                background: #f8f9fa;
                border-radius: 12px;
            }}
            
            .version {{
                position: fixed;
                bottom: 10px;
                right: 10px;
                background: rgba(0,0,0,0.7);
                color: white;
                padding: 5px 10px;
                border-radius: 5px;
                font-size: 0.8em;
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <div class="logo">üåäüíô</div>
                <h1>FlowMe v3</h1>
                <p class="subtitle">Votre compagnon IA pour un bien-√™tre √©motionnel optimal</p>
            </div>
            
            <div class="status-info">
                <strong>üîß √âtat du syst√®me :</strong> {states_count} √©tats charg√©s depuis {source_info}
                {"<br><small>üè† Mode de secours local actif - Fonctionnement garanti</small>" if source_info == "Local Fallback" else ""}
            </div>
            
            <div class="chat-container" id="chatContainer">
                <div class="ai-message">
                    <strong>FlowMe:</strong> Bonjour ! Je suis FlowMe, votre compagnon IA empathique. 
                    Comment vous sentez-vous aujourd'hui ? Partagez vos √©motions avec moi, je suis l√† pour vous √©couter et vous accompagner. üíô
                </div>
            </div>
            
            <div class="typing" id="typing">FlowMe r√©fl√©chit...</div>
            
            <div class="input-container">
                <input type="text" id="userInput" placeholder="Exprimez vos √©motions ici..." maxlength="500" autocomplete="off">
                <button id="sendButton" onclick="sendMessage()">Envoyer</button>
            </div>
            
            <div class="stats">
                <p><strong>üìä √âtats √©motionnels :</strong> {states_count} ({source_info})</p>
            </div>
            
            <div class="states-grid" id="statesGrid">
                <!-- Les √©tats seront g√©n√©r√©s dynamiquement -->
            </div>
        </div>
        
        <div class="version">FlowMe v3.0 - S√©curis√©</div>
        
        <script>
            const states = {states_json};
            let isProcessing = false;
            
            // G√©n√©ration s√©curis√©e des cartes d'√©tats
            function generateStatesGrid() {{
                const grid = document.getElementById('statesGrid');
                grid.innerHTML = '';
                
                Object.entries(states).forEach(([name, info]) => {{
                    const card = document.createElement('div');
                    card.className = 'state-card';
                    card.style.borderColor = info.color || '#f0f0f0';
                    card.innerHTML = `
                        <div class="state-emoji">${{info.emoji || 'üòê'}}</div>
                        <div class="state-name">${{name}}</div>
                        <div class="state-description">${{info.description || ''}}</div>
                    `;
                    card.onclick = () => {{
                        const input = document.getElementById('userInput');
                        input.value = `Je me sens ${{name.toLowerCase()}}`;
                        input.focus();
                    }};
                    grid.appendChild(card);
                }});
            }}
            
            // Envoi s√©curis√© de message
            async function sendMessage() {{
                if (isProcessing) return;
                
                const input = document.getElementById('userInput');
                const message = input.value.trim();
                
                if (!message || message.length < 2) return;
                
                isProcessing = true;
                document.getElementById('sendButton').disabled = true;
                document.getElementById('typing').classList.add('show');
                
                // Affichage du message utilisateur
                addMessage(message, 'user');
                input.value = '';
                
                try {{
                    const response = await fetch('/chat', {{
                        method: 'POST',
                        headers: {{
                            'Content-Type': 'application/json; charset=utf-8'
                        }},
                        body: JSON.stringify({{ message: message }})
                    }});
                    
                    if (response.ok) {{
                        const data = await response.json();
                        
                        if (data.response) {{
                            addMessage(data.response, 'ai', data.detected_state);
                        }} else {{
                            addMessage('D√©sol√©, une erreur est survenue. Pouvez-vous r√©essayer ?', 'ai');
                        }}
                    }} else {{
                        addMessage('Erreur de connexion. V√©rifiez votre connexion internet.', 'ai');
                    }}
                }} catch (error) {{
                    console.error('Erreur:', error);
                    addMessage('Erreur de connexion. Veuillez r√©essayer.', 'ai');
                }} finally {{
                    isProcessing = false;
                    document.getElementById('sendButton').disabled = false;
                    document.getElementById('typing').classList.remove('show');
                }}
            }}
            
            // Ajout s√©curis√© de message dans le chat
            function addMessage(text, sender, detectedState = null) {{
                const container = document.getElementById('chatContainer');
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${{sender}}-message`;
                
                // √âchappement XSS basique
                const safeText = text.replace(/</g, '&lt;').replace(/>/g, '&gt;');
                let content = `<strong>${{sender === 'user' ? 'Vous' : 'FlowMe'}}:</strong> ${{safeText}}`;
                
                if (detectedState && states[detectedState]) {{
                    const stateInfo = states[detectedState];
                    content += `<div class="state-indicator" style="background-color: ${{stateInfo.color}}">
                        ${{stateInfo.emoji || 'üòê'}} √âtat d√©tect√©: ${{detectedState}}
                    </div>`;
                }}
                
                messageDiv.innerHTML = content;
                container.appendChild(messageDiv);
                container.scrollTop = container.scrollHeight;
            }}
            
            // √âv√©nements s√©curis√©s
            document.getElementById('userInput').addEventListener('keypress', function(e) {{
                if (e.key === 'Enter' && !e.shiftKey) {{
                    e.preventDefault();
                    sendMessage();
                }}
            }});
            
            // Initialisation s√©curis√©e
            document.addEventListener('DOMContentLoaded', function() {{
                generateStatesGrid();
                document.getElementById('userInput').focus();
            }});
        </script>
    </body>
    </html>
    """
    return HTMLResponse(content=html_content)

@app.post("/chat")
async def chat_endpoint(chat_message: ChatMessage):
    """Endpoint principal de chat s√©curis√©"""
    try:
        # Validation des donn√©es d'entr√©e
        if not chat_message.message or len(chat_message.message.strip()) < 2:
            raise HTTPException(status_code=400, detail="Message trop court")
        
        if len(chat_message.message) > 1000:
            raise HTTPException(status_code=400, detail="Message trop long")
        
        if not flowme_states:
            raise HTTPException(status_code=503, detail="Service FlowMe non disponible")
        
        # Nettoyage du message
        clean_message = chat_message.message.strip()[:500]
        user_id = chat_message.user_id[:50] if chat_message.user_id else "anonymous"
        
        # D√©tection de l'√©tat √©motionnel
        detected_state = flowme_states.detect_emotion(clean_message)
        
        # G√©n√©ration de la r√©ponse
        ai_response = await generate_mistral_response_secure(clean_message, detected_state)
        
        # Sauvegarde asynchrone (non bloquante)
        await save_to_nocodb_secure(clean_message, ai_response, detected_state, user_id)
        
        return JSONResponse({
            "response": ai_response,
            "detected_state": detected_state,
            "state_info": {
                "description": flowme_states.states.get(detected_state, {}).get("description", ""),
                "color": flowme_states.states.get(detected_state, {}).get("color", "#808080"),
                "emoji": flowme_states.states.get(detected_state, {}).get("emoji", "üòê")
            },
            "source": flowme_states.source,
            "timestamp": datetime.now().isoformat()
        })
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"üí• Erreur chat endpoint: {e}")
        return JSONResponse({
            "response": "Je rencontre une difficult√© technique temporaire. Pouvez-vous r√©essayer dans un moment ?",
            "detected_state": "Pr√©sence",
            "error": "Service temporairement indisponible",
            "source": "Fallback"
        }, status_code=500)

@app.get("/health")
async def health_check():
    """V√©rification de sant√© s√©curis√©e du service"""
    try:
        health_data = {
            "status": "healthy",
            "version": "3.0.0",
            "timestamp": datetime.now().isoformat(),
            "environment": ENVIRONMENT,
            "states": {
                "count": len(flowme_states.states) if flowme_states else 0,
                "source": flowme_states.source if flowme_states else "unknown"
            },
            "services": {
                "mistral": bool(MISTRAL_API_KEY),
                "nocodb": bool(NOCODB_API_KEY),
                "github": bool(GITHUB_TOKEN)
            }
        }
        
        # Informations sensibles masqu√©es en production
        if ENVIRONMENT != "production":
            health_data["debug"] = {
                "nocodb_url": NOCODB_URL,
                "states_table": NOCODB_STATES_TABLE_ID,
                "reactions_table": NOCODB_REACTIONS_TABLE_ID
            }
        
        return JSONResponse(health_data)
        
    except Exception as e:
        logger.error(f"üí• Erreur health check: {e}")
        return JSONResponse({
            "status": "error",
            "message": "Service health check failed"
        }, status_code=500)

@app.get("/api/states")
async def get_states():
    """API pour r√©cup√©rer les √©tats disponibles"""
    try:
        if not flowme_states:
            raise HTTPException(status_code=503, detail="√âtats non disponibles")
        
        return JSONResponse({
            "states": {
                name: {
                    "description": info["description"],
                    "color": info["color"],
                    "emoji": info["emoji"]
                }
                for name, info in flowme_states.states.items()
            },
            "count": len(flowme_states.states),
            "source": flowme_states.source,
            "timestamp": datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"üí• Erreur API states: {e}")
        raise HTTPException(status_code=500, detail="Erreur r√©cup√©ration √©tats")

# Middleware de s√©curit√©
@app.middleware("http")
async def security_middleware(request: Request, call_next):
    """Middleware de s√©curit√© pour les requ√™tes"""
    # Headers de s√©curit√©
    response = await call_next(request)
    response.headers["X-Content-Type-Options"] = "nosniff"
    response.headers["X-Frame-Options"] = "DENY"
    response.headers["X-XSS-Protection"] = "1; mode=block"
    
    if ENVIRONMENT == "production":
        response.headers["Strict-Transport-Security"] = "max-age=31536000; includeSubDomains"
    
    return response

if __name__ == "__main__":
    port = int(os.getenv("PORT", 8000))
    uvicorn.run(
        app, 
        host="0.0.0.0", 
        port=port,
        log_level="info" if ENVIRONMENT != "production" else "warning"
    )
                }});
